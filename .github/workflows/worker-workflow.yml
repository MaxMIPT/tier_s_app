name: Worker CI

on:
  push:

env:
  POETRY_VERSION: '1.6.1'
  PYTHON_VERSION: '3.12'

  SQL_HOST: ${{ secrets.WORKER_SQL_HOST }}
  SQL_PORT: ${{ secrets.WORKER_SQL_PORT }}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry & dependencies
        working-directory: worker
        shell: bash
        run: |
          pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry install --no-interaction --no-ansi

      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-worker-poetry-venv-${{ hashFiles('worker/poetry.lock') }}

  lint-flake8:
    needs: setup
    runs-on: ubuntu-latest
    continue-on-error: true # TODO: remove after fix
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}

      - name: Install dependencies
        working-directory: worker
        run: |
          poetry install --no-interaction --no-ansi    

      - name: Run flake8
        working-directory: worker
        run: poetry run flake8 . --per-file-ignores="__init__.py:F401" --max-line-length 99

  test:
    needs: [ lint-flake8 ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run pytest
        working-directory: worker
        run: poetry run pytest

  build-and-push:
    if: github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push Docker image
        run: |
          docker build \
            --build-arg SQL_HOST=${{ env.SQL_HOST }} \
            --build-arg SQL_PORT=${{ env.SQL_PORT }} \
            -t ghcr.io/${{ github.repository_owner }}/worker:${{ github.sha }} \
            -f worker/Dockerfile worker
          docker push ghcr.io/${{ github.repository_owner }}/worker:${{ github.sha }}
